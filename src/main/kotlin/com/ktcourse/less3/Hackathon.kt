package com.ktcourse.less3

import java.time.LocalDate

//HOMEWORK3
//

const val event: String = "Hackathon Survival"  //Название мероприятия
var dateEvent = LocalDate.parse("2024-09-13")      //Дата проведения
val placeEvent: String = "Адрес"    //Место проведения

//Подробный бюджет мероприятия, включая расходы на оборудование, кейтеринг и другие операционные расходы
//вариант 1
private val superBudget1: List<Float> = listOf(12000F, 55000F, 4750F, 0.4F)

//вариант 2
private var superBudget2: Float = 0.0f

//см. запись - String

//Количество участников
val participants: Int = 25

//пример см запись:
var participants2: Int = 0
    get() = field
    private set(value) {
        field = value
    } //никто снаружи, только изм изнутри

//Длительность хакатона
var timePeriod: Long = 14400L

//Контактная информация и условия соглашений с поставщиками пищи, оборудования и других услуг.
private val contacts: String = "Контакты"

//Текущее состояние хакатона (статус)
val status: String by lazy {
    "Status1"
}

//см. запись:
var status1: String = "Не начат"

//Список спонсоров
val sponsors: String = listOf("Спонсор 1", "Спонсор 2").toString()

//Бюджет мероприятия
private var budget: Float = 0.0f

//Текущий уровень доступа к интернету
var internetAccess: Int = 0

//Информация о транспортировке оборудования, распределении ресурсов и координации между различными командами поддержки.
private var sourceInfo: String = "Инфо"

//Количество команд
var teamCount: Int = 0

//Перечень задач
val tasks: String = listOf("задача 1", "задача 2").toString()

//План эвакуации
var evacuationPlan = "https://cs12.pikabu.ru/post_img/2020/05/08/8/158894286817626988.jpg"

//Список доступного оборудования
val equipment: String = listOf("Оборудование 1", "Оборудование 2").toString()

//Список свободного оборудования
var availableEquipment = equipment

//График питания участников (зависит от поставщика питания, определяемого за неделю до начала)
lateinit var nutrition: String
//или by lazy?

//План мероприятий на случай сбоев
var extraPlan: String = "План Б"

//Список экспертов и жюри
val experts: String = listOf("experts 1", "experts 2").toString()

//Методы и процедуры для сбора отзывов от участников и гостей, включая анонимные опросы и интервью.
val methodsСollection: String by lazy { listOf("method 1", "method 2").toString() }

//Политика конфиденциальности
//вариант 1 когда это ссылка на файл полики
var confidentialityFile = "https://cs12.k8s.ru/post_log/2020/05/08/8/158894286817626988"
//вариант 2 когда подписано или нет
var confidentiality: Boolean = false
//Приватные отзывы (фидбэк) участников и зрителей для анализа проблем.
//вариант 3 когда это текстовка
var confidentialityString: String = "Текстовка политики..."

//Текущая температура в помещении
var temperature: Int = 21

//Мониторинг и анализ производительности сетевого оборудования и интернет-соединения.
var monitoringLogFile = "https://cs12.k8s.ru/post_log/2020/05/08/8/16817626988"

//Уровень освещения
var lumen: Int = 210

//Лог событий мероприятия
var logFile = "https://cs12.k8s.ru/post_log/2020/05/08/8/158894286817626988"

//Доступность медицинской помощи
var medPersonal: Int = 0

//Планы и процедуры для обеспечения безопасности мероприятия, включая планы эвакуации и протоколы чрезвычайных ситуаций.
val plans: String = listOf("experts 1", "experts 2").toString()
//тут нужно было ссылки на файлы планов, но я не разобралась как без функций или, например, Glade ссылками делать

//Регистрационный номер мероприятия
val regNumber: String = "АНП4785"

//Максимально допустимый уровень шума в помещении хакатона.
var noiseLevel: Int = 65

//Индикатор превышения уровня шума в помещениях
var maxNoiseLevel1: Boolean = false //превысили или нет

//Формат мероприятия (зависит от геополитической обстановки)
var eventFormat: String = ""
    get() = field
    set(value) {
        field = if (value == "геополитическая обстановка позволяет") {
            "Формат мероприятия 1"
        } else {
            "Формат мероприятия 2"
        }
    }

//Количество свободных мест для отдыха (например, кресел или диванов), сеттер валидирует, чтобы количество не было меньше нуля.
var freeSeats: UInt = 90u
//    get() = field
//    set(value) {
//        field = if (value >= 2) {
//            "Места заканчиваются"
//        } if (value )
//        else {
//            "Формат мероприятия 2"
//        }
//    }

//План взаимодействия с прессой
val pressInteraction: String = "План взаимодействия с прессой"

//Детальная информация о проектах каждой команды, сбор данных включает в себя компиляцию кода и сбор статистики прогона автоматизированных проверок.
val detailProjectInfo: String by lazy { " " }

//Статус получения всех необходимых разрешений
var permission: Boolean = false

//Указывает, открыт ли доступ к эксклюзивным ресурсам (например, специальному оборудованию)
var extraAccess: Boolean = false

//Список партнеров мероприятия
val partners: String = listOf("partner 1", "partner 2").toString()

//Отчет, включающий фотографии, видео и отзывы, генерируется и становится доступен после завершения мероприятия.
val reportProjects: String by lazy { " " }

//План распределения призов
val prizes: String= "Супер приз достается команде, получившей максимальное кол-во баллов. Приз 2 категории..."

//Контактная информация экстренных служб, медицинского персонала и других важных служб, недоступная участникам.
var extraContacts: String = "112 Экстренная служба"

//Особые условия для участников с ограниченными возможностями
var inclusive: String = "особые условия..."

//Общее настроение участников (определяется опросами)
val mood: String by lazy { " " }

//Подробный план хакатона, включающий время и содержание каждого сегмента, инициализируется непосредственно перед началом мероприятия.
lateinit var detailedPlan: String

//Имя знаменитого специального гостя, которое будет объявлено за день до мероприятия.
private lateinit var specialGuest: String

//Максимальное количество людей, которое может вместить место проведения.
var maxMembers: Int = 88

//Стандартное количество часов, отведенное каждой команде для работы над проектом.
var standartComandTime: Long = 2400L

//Текущая температура в помещении
val currentTemperature: Int = 21

